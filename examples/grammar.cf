# Example: algebraic expression evaluator

# <delim>: "\s"
# Tokens are given by names and consuming values
# For regular expressions use " " quotes
Num: "[0-9]+"
# For string literals use ' ' quotes
# Tokens can be combined with | (or) operator
OpExpr: '+' | '-'
OpProduct: '*' | '/'

# All token and rule identifiers have to be ascii alpha characters

# SKIP is a special token that expresses which tokens should ignored in the generated grammar
SKIP: "\s"

# Top level rules is donated with a !
# Exactly one top level rule must be given
!Formula():
    begin:
        typ = 'top level'
    expansion:
        # Expr has a parameter that must be passed
        result = Expr(typ)
    end:
        print(result)

# Production rules are given with a function notation, where the function name is the left side of the rule
# The right side is given within the 'expansion', where the given variable can be expanded to every set of symbols seperated by | (or) operators
# The string of terminals is given by comma seperated (,) list, where each variable can be saved in a Python identifier that can be accessed in 'end' section
# 'begin' describes a Python code that runs before the rule is visited
# 'end' describes a Python code that runs after the rule is visited

# Production rules can have parameters (id list) that will be expected when given the expansion
Expr(typ):
    begin:
        print(typ)
        a = 0
        b = 0
        op = '+'
        typ = 'continuous level'

    expansion:
        a = Term() |
        a = Expr(typ), op = OpExpr,
        b = Term()

    end:
        if op == '+':
            return a + b
        else:
            return a - b

Term():
    begin:
        a = 0
        b = 1
        op = '*'

    expansion:
        a = Factor() |
        a = Term(), op = OpProduct, b = Factor()

    end:
        if op == '*':
            return a * b
        else:
            return a / b

Factor():
    begin:
        typ = 'sub level'
    expansion:
        a = Number() |
        '(', a = Expr(typ), ')'
    end:
        return a

Number():
    expansion:
        # Both versions work
        # num = Num
        num = "[0-9]+"
    end:
        return int(num)
